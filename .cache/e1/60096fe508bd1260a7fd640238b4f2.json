{"id":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","dependencies":[{"name":"C:\\Users\\rishi\\Downloads\\top-down-2d-game-camera\\top-down-2d-game-camera\\dist\\package.json","includedInParent":true,"mtime":1646854395460},{"name":"C:\\Users\\rishi\\Downloads\\top-down-2d-game-camera\\top-down-2d-game-camera\\dist\\node_modules\\lighthouse-web3\\package.json","includedInParent":true,"mtime":1646854395237},{"name":"axios","loc":{"line":1,"column":22,"index":22},"parent":"C:\\Users\\rishi\\Downloads\\top-down-2d-game-camera\\top-down-2d-game-camera\\dist\\node_modules\\lighthouse-web3\\Lighthouse\\deploy\\deployFile.js","resolved":"C:\\Users\\rishi\\Downloads\\top-down-2d-game-camera\\top-down-2d-game-camera\\dist\\node_modules\\axios\\index.js"},{"name":"../../lighthouse.config","loc":{"line":2,"column":33,"index":65},"parent":"C:\\Users\\rishi\\Downloads\\top-down-2d-game-camera\\top-down-2d-game-camera\\dist\\node_modules\\lighthouse-web3\\Lighthouse\\deploy\\deployFile.js","resolved":"C:\\Users\\rishi\\Downloads\\top-down-2d-game-camera\\top-down-2d-game-camera\\dist\\node_modules\\lighthouse-web3\\lighthouse.config.js"}],"generated":{"js":"const axios = require(\"axios\");\nconst lighthouseConfig = require(\"../../lighthouse.config\");\n/*\n  This function is used to deploy a file to the Lighthouse server.\n  It takes the following parameters:\n  @param {string} sourcePath - The path of file/folder.\n  @param {string} publicKey - The public key of the user.\n  @param {string} signedMessage - The signed message for verification.\n*/\n\nmodule.exports = (sourcePath, publicKey, signedMessage) => {\n  const fs = eval(\"require\")(\"fs\");\n  const NodeFormData = eval(\"require\")(\"form-data\");\n  const recursive = eval(\"require\")(\"recursive-fs\");\n  const basePathConverter = eval(\"require\")(\"base-path-converter\");\n  const token = \"Bearer \" + publicKey + \" \" + signedMessage;\n\n  return new Promise((resolve, reject) => {\n    const endpoint = lighthouseConfig.node;\n\n    fs.stat(sourcePath, (err, stats) => {\n      if (err) {\n        reject(err);\n      }\n      if (stats.isFile()) {\n        //we need to create a single read stream instead of reading the directory recursively\n        const data = new NodeFormData();\n\n        data.append(\"file\", fs.createReadStream(sourcePath));\n\n        axios\n          .post(endpoint, data, {\n            withCredentials: true,\n            maxContentLength: \"Infinity\", //this is needed to prevent axios from erroring out with large directories\n            maxBodyLength: \"Infinity\",\n            headers: {\n              \"Content-type\": `multipart/form-data; boundary= ${data._boundary}`,\n              Authorization: token,\n            },\n          })\n          .then(function (result) {\n            if (result.status !== 200) {\n              reject(\n                new Error(\n                  `unknown server response while pinning File to IPFS: ${result}`\n                )\n              );\n            }\n            resolve(result.data);\n          })\n          .catch(function (error) {\n            console.log(error);\n            reject(formattedError);\n          });\n      } else {\n        recursive.readdirr(sourcePath, function (err, dirs, files) {\n          if (err) {\n            reject(new Error(err));\n          }\n\n          let data = new NodeFormData();\n\n          files.forEach((file) => {\n            //for each file stream, we need to include the correct relative file path\n            data.append(\"file\", fs.createReadStream(file), {\n              filepath: basePathConverter(sourcePath, file),\n            });\n          });\n\n          axios\n            .post(endpoint, data, {\n              withCredentials: true,\n              maxContentLength: \"Infinity\",\n              maxBodyLength: \"Infinity\", //this is needed to prevent axios from erroring out with large directories\n              headers: {\n                \"Content-type\": `multipart/form-data; boundary= ${data._boundary}`,\n                Authorization: token,\n              },\n            })\n            .then(function (result) {\n              if (result.status !== 200) {\n                reject(\n                  new Error(\n                    `unknown server response while pinning File to IPFS: ${result}`\n                  )\n                );\n              }\n\n              const temp = result.data.split(\"\\n\");\n              const response = JSON.parse(temp[temp.length - 2]);\n              resolve(response);\n            })\n            .catch(function (error) {\n              reject(error);\n            });\n        });\n      }\n    });\n  });\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}}],"sources":{"node_modules/lighthouse-web3/Lighthouse/deploy/deployFile.js":"const axios = require(\"axios\");\nconst lighthouseConfig = require(\"../../lighthouse.config\");\n/*\n  This function is used to deploy a file to the Lighthouse server.\n  It takes the following parameters:\n  @param {string} sourcePath - The path of file/folder.\n  @param {string} publicKey - The public key of the user.\n  @param {string} signedMessage - The signed message for verification.\n*/\n\nmodule.exports = (sourcePath, publicKey, signedMessage) => {\n  const fs = eval(\"require\")(\"fs\");\n  const NodeFormData = eval(\"require\")(\"form-data\");\n  const recursive = eval(\"require\")(\"recursive-fs\");\n  const basePathConverter = eval(\"require\")(\"base-path-converter\");\n  const token = \"Bearer \" + publicKey + \" \" + signedMessage;\n\n  return new Promise((resolve, reject) => {\n    const endpoint = lighthouseConfig.node;\n\n    fs.stat(sourcePath, (err, stats) => {\n      if (err) {\n        reject(err);\n      }\n      if (stats.isFile()) {\n        //we need to create a single read stream instead of reading the directory recursively\n        const data = new NodeFormData();\n\n        data.append(\"file\", fs.createReadStream(sourcePath));\n\n        axios\n          .post(endpoint, data, {\n            withCredentials: true,\n            maxContentLength: \"Infinity\", //this is needed to prevent axios from erroring out with large directories\n            maxBodyLength: \"Infinity\",\n            headers: {\n              \"Content-type\": `multipart/form-data; boundary= ${data._boundary}`,\n              Authorization: token,\n            },\n          })\n          .then(function (result) {\n            if (result.status !== 200) {\n              reject(\n                new Error(\n                  `unknown server response while pinning File to IPFS: ${result}`\n                )\n              );\n            }\n            resolve(result.data);\n          })\n          .catch(function (error) {\n            console.log(error);\n            reject(formattedError);\n          });\n      } else {\n        recursive.readdirr(sourcePath, function (err, dirs, files) {\n          if (err) {\n            reject(new Error(err));\n          }\n\n          let data = new NodeFormData();\n\n          files.forEach((file) => {\n            //for each file stream, we need to include the correct relative file path\n            data.append(\"file\", fs.createReadStream(file), {\n              filepath: basePathConverter(sourcePath, file),\n            });\n          });\n\n          axios\n            .post(endpoint, data, {\n              withCredentials: true,\n              maxContentLength: \"Infinity\",\n              maxBodyLength: \"Infinity\", //this is needed to prevent axios from erroring out with large directories\n              headers: {\n                \"Content-type\": `multipart/form-data; boundary= ${data._boundary}`,\n                Authorization: token,\n              },\n            })\n            .then(function (result) {\n              if (result.status !== 200) {\n                reject(\n                  new Error(\n                    `unknown server response while pinning File to IPFS: ${result}`\n                  )\n                );\n              }\n\n              const temp = result.data.split(\"\\n\");\n              const response = JSON.parse(temp[temp.length - 2]);\n              resolve(response);\n            })\n            .catch(function (error) {\n              reject(error);\n            });\n        });\n      }\n    });\n  });\n};\n"},"lineCount":101}},"error":null,"hash":"c3ef3699e13eac8766d0ae04449c83f4","cacheData":{"env":{}}}